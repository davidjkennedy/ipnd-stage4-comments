stage4 = [
{"title": "Stage 4: Allow Comments"}, 
{"desc": "Here we learn how to set up a server using Google App Engine and use the Googe DataStore that will respond to our own browser requests."}, 
{"title": "Lesson 1: Networks"}, 
{"desc": "A network is a group of entities that can communicate, even though they are not all directly connected. Latency is the time it takes a message to get from source to destination. Bandwidth is the amount of information that can be transmitted per unit time. Hypertext Transfer Protocol (HTTP) is the protocol of the Internet."},
{"title": "Lesson 2: Make the internet work for you, structuring html"},
{"desc": """URL: A URL is the human readable locator which resolves to a numerical IP Address and represents, as Steve says, "the location of the physical machine which has the document we want to fetch."  """},
{"desc": """IP Address: An Internet Protocol address (IP address) is a numerical label assigned to each device (e.g., computer, printer) participating in a computer network that uses the Internet Protocol for communication."""}, 
{"desc": """Query Parameters: This is extra information that the server gets when you make a request for a certain path. It can effect cashing because technically it changes the entire URL. There are therefore all sorts of handy uses that these Query Parameters can do."""}, 
{"desc": """We communicate with server through browsers using http, they can respond either statically with a pre-written file or dynamically with responses generated on the fly by web apps. One of the big differences between gets and post is that gats include parameters in the url, and posts are included in body."""},
{"desc": """GET: Get is the default method. Get's include parameters in the URL, are restricted by a max URL length, and are used for fetching documents. Get requests should not be used to change data on the server."""},
{"desc": """POST: Post Request are appropriate for updating data on servers and sending a lot of data, as they do not have a max length and should not be cashed"""},
{"desc": """Web Application: A Web Application is a program that generates content dynamically, Lives on a web server, speaks http and generates the web content that your browser requests."""},
{"title": "Lesson 3: Forms"},
{"desc": "Forms are all over the internet, text fields, drop-downs, check boxes, and radio buttons, all allow web sites to get information from users"},
{"title": "Lesson 4: Modulus & Dictionaries"},
{"desc": """Modulus Operator % takes a number and maps it to the range based on the remainder, when you divide that number e.g. 14%12 == 2"""}, 
{"desc": """Dictionaries are made up of key : value pairs, and as such allow you to associate one thing with another"""}, 
{"title": "Lesson 5:  Working with App Engine"}, 
{"desc": "See the Stage 4 Resources for links about this section."},
{"title": "Lesson 6: Validation"},
{"desc": "Form Validation: Verifying that the data received from the user is what we expect is important. Validation makes the process of checking that the values received meets certain rules. Checks are used to confirmed that data makes sense and is the right type, format, and structure. e.g. length checks, range checks, reasonability checks, and format checks."""},
{"desc": """Unchecked Input can cause serious errors, dividing by zero can cause applications to crash, integer overflow, and buffer overflow errors can make the app vulnerable if not handled, hackers can use incorrect data intentionally to bring down or alter an app, injecting javascript, or invalid passwords can give unauthorized access to users.  When your program runs across invalid input, it should recover as much data as possible and then repeat the request, and alert the user to a problem. Arbitrary decisions such as truncating or otherwise reformatting data to "make it fit" should be avoided"""},
{"desc": """User Input Validation is used on the server side to verify what you receive is safe, here is a typical chain of events."""},
{"desc": "A User makes a request(get), server responds with a form data, user makes a post request with the data, server verifies user input, on error, server re-renders the form (preserving the user input), and includes an error message, on success server redirects user to a confirmation."""},
{"desc": "Custom Input Validation: is error prone and a pain to change, HTML Escaping is built in to templates."""},
{"title": "Lesson 7: HTML Templates"},
{"desc": """Templates allows us to avoid repetition in the HTML we write, and so helps make complex applications much more easily. Creating a template for the elements that are common to each page of the website, for example headers (navigation bars), and footers (copyright information), by creating variables and using expressions that will be replaced when the template is run dramatically reduces the amount of code that has to be generated. Having the data of the site built into a data structure, a (context dictionary) that is fed to the template engine, means the key value pairs can be iterated over and have conditionals applied making the output modular, and scalable, and making the editing and updating much easier and more accurate as it has only to be done once and in one location."""},
{"desc":"""Template Libraries are Libraries developed to build complicated strings. The vast majority of the time that means html. Jinja2 is a library built into Google App Engine, there are however many other libraries. Jinja2 has autoescape. Always automatically escape variables when possible. Minimize code in templates, Minimize html in code, it makes for more readable code more secure websites and more editable html."""},
{"title":"Lesson 8: Databases"},
{"desc": "A Database is a program that stores and retrieves large amounts of structured data"},
{"desc": "Types of Databases: Relational Databases - SQL, MySQL, SQLite, Oracle, Google App Engine Datastore, Amazon's Dynamo."},
{"desc": "No SQL Examples: Mongo , Couch"},
{"desc": """Software sitting on  servers processes data, using tables that are made up of links (assets). Types = columns (vertical), and every entry in the column is a row ID (horizontal)."""},
{"desc": "Querying Data: Downside of querying data by hand: Its error prone tedious and slow, Databases exist to take big chunks of data and answer queries about them in a reasonable amount of time."},
{"desc": """Google App Engine Datastore: tables are know as Entities in Datastore, columns are not fixed (they can be changed), Every entity has an ID, Entities - Parents/Ancestors. Datastore transforms rows into OBJECTS so will have a link; comment; date; attribute. How do you define a Object? Create a Class."""}
]